import { decodeBase64 } from '../utils/utils.js';
import { validateRequest } from '../validation/validation.js';
import { parseFileContent, PROVIDER_RESPONSE_PARSER } from '../parsers/parsers.js';
import { getVulnerablePackages } from '../vulnerability-check/vulnerabilityCheck.js';

export const parseVulnerabilityData = (vulnerabilitData, providerApi) => {
  return vulnerabilitData.map((node) => (PROVIDER_RESPONSE_PARSER[providerApi](node)));
};

export const scan = async (req, res) => {
  try {
    validateRequest(req.body);
    const ecosystem = req.body.ecosystem;
    const decodedContent = decodeBase64(req.body.fileContent);
    const parsedFileContent = parseFileContent(ecosystem, decodedContent);
    const vulnerabilities = await getVulnerablePackages(parsedFileContent, ecosystem);
    res.json({ vulnerablePackages: vulnerabilities });
  } catch (error) {
    console.error(error);
    res.status(400).send(error.message);
  }
};
