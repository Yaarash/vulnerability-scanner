
import semver from 'semver';
import { decodeBase64 } from '../utils/utils.js';
import { callGithubApi } from '../../api/githubApi.js';

export const validateRequest = (req) => {
  if (!req.body || !req.body.ecosystem || !req.body.fileContent) {
    throw new Error('Missing required fields in request body');
  }

  if (req.body.ecosystem !== 'npm') {
    throw new Error('Currently only npm ecosystem is supported');
  }
};

export const fetchVulnerabilities = async (packageName) => {
  const response = await callGithubApi(packageName);
  //validate response
  return response.data.data.securityVulnerabilities;
};
  
export const isVulnerable = (packageVersion, vulnerability) => {
  const cleanRange = vulnerability.vulnerableVersionRange.replace(/ /g,'').replace(',', ' ');
  return semver.satisfies(packageVersion, cleanRange);
}

const getVulnerablePackages = async (dependencies) => {
    const vulnerabilities = [];
    for (const packageName of Object.keys(dependencies)) {
      const packageVersion = dependencies[packageName];
      if (!dependencies) break;
      const vulnerabilityData = await fetchVulnerabilities(packageName);
  
      if (vulnerabilityData && vulnerabilityData.nodes.length > 0) {
        for (const node of vulnerabilityData.nodes) {
          const vulnerability =  {
            name: node.package.name,
            severity: node.severity,
            summary: node.advisory.summary,
            firstPatchedVersion: node.firstPatchedVersion ? node.firstPatchedVersion.identifier : null,
            vulnerableVersionRange: node.vulnerableVersionRange,
          };
          if (isVulnerable(packageVersion, vulnerability)) {
            vulnerabilities.push({ ...vulnerability, version: packageVersion });
          }
        }
      }
    }
    return vulnerabilities;
};

export const scan = async (req, res) => {
  try {
    validateRequest(req);
    const decodedContent = decodeBase64(req.body.fileContent);
    const packageJson = JSON.parse(decodedContent);
    const dependencies = packageJson.dependencies || {};
    const vulnerabilities = await getVulnerablePackages(dependencies);
    res.json({ vulnerablePackages: vulnerabilities });
  } catch (error) {
    console.error(error);
    res.status(400).send(error.message);
  }
};
